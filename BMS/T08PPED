      *----------------------------------------------------------------*
       IDENTIFICATION                      DIVISION.
      *----------------------------------------------------------------*
       PROGRAM-ID.                         T08PPED.
       AUTHOR.                             LUIS E LUCAS
      *----------------------------------------------------------------*
       ENVIRONMENT                         DIVISION.
      *----------------------------------------------------------------*
       CONFIGURATION                       SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.
      *----------------------------------------------------------------*
       DATA                                DIVISION.
      *----------------------------------------------------------------*
       WORKING-STORAGE                     SECTION.
      *----------------------------------------------------------------*
       77  WS-MSG-ERRO                     PIC X(80).
       77  WS-LENGTH                       PIC S9(04) COMP.

       01  WS-DFHCOMMAREA.
           05 WS-FASE                      PIC X(01).
           05 WS-PEDPAG                    PIC 9(02).
           05 WS-PEDPAGD                   PIC 9(02).
           05 WS-IDPROD-COMMAREA           PIC 9(09).
       01  WS-DFHCOMMAREA-AUX.
           05 WS-FASE-COMMAREA             PIC X(01).
       77  WS-TEXTO-LIMPO                  PIC X(30) VALUE SPACES.
       77  WS-INICIO                       PIC 9(02) VALUE 0.
       77  WS-FIM                          PIC 9(02) VALUE 0.
       77  WS-TAMANHO                      PIC 9(02) VALUE 0.
       77  WS-TEXTO-LIMPO-V                 PIC X(30) VALUE SPACES.
       77  WS-INICIO-V                      PIC 9(02) VALUE 0.
       77  WS-FIM-V                         PIC 9(02) VALUE 0.
       77  WS-TAMANHO-V                     PIC 9(02) VALUE 0.

       01  WS-VAR-TEMPO.
           05 WS-DATA                      PIC X(10).
           05 WS-HORARIO                   PIC X(08).
      *
       77  WS-QUEUE-NAME                   PIC X(08)
                                                   VALUE 'TS08PPRL'.
       77  WS-TRIM                         PIC 9(02).
       77  WS-ALL-SPACES                   PIC X(15) VALUE SPACES.
       77  WS-PED-AUX                      PIC X(15).
       77  WS-VENDA-AUX                    PIC X(15).
       01  LD-LINDET.
           05 FILLER                       PIC X(05)
                                                   VALUE SPACES.
           05 LD-ID-PED                    PIC X(07).
           05 FILLER                       PIC X(03) VALUE SPACES.
           05 LD-ITEM                      PIC X(25).
           05 FILLER                       PIC X(03)
                                                   VALUE SPACES.
           05 LD-DATA                      PIC X(10).
           05 FILLER                       PIC X(03)
                                                   VALUE SPACES.
           05 FILLER                       PIC X(01)
                                                   VALUE '$'.
           05 LD-VALORPROD                 PIC Z.ZZZ.ZZ9,99.
           05 FILLER                       PIC X(11)
                                                   VALUE SPACES.
       77  WS-ITEM                         PIC S9(04) COMP.
       77  WS-RESP                         PIC S9(08) COMP.
       77  WS-RESTO                        PIC 9(01).
       77  WS-INDEX                        PIC 9(02).

       01  WS-ENDFILE-AUX                  PIC X(01).
           88 ENDFILE-YES                          VALUE 'S'.
           88 ENDFILE-NO                           VALUE 'N'.
       77  WS-FILTRO                        PIC X(15).
       77  WS-FILTRO-V                      PIC X(15).
       77  WS-VALOR                         PIC S9(5)V9(2) COMP-3.
       77  WS-VALOR-TOTAL                   PIC S9(5)V9(2) COMP-3.

       77  WS-DESCPROD-AUX                  PIC X(24).
       01  WS-DATA-INICIAL.
           05 WS-INICIAL-ANO               PIC 9(04).
           05 FILLER                       PIC X(01)
                                                   VALUE '.'.
           05 WS-INICIAL-MES               PIC 9(02).
           05 FILLER                       PIC X(01)
                                                   VALUE '.'.
           05 WS-INICIAL-DIA               PIC 9(02).
       01  WS-DATA-FINAL.
           05 WS-FINAL-ANO                 PIC 9(04).
           05 FILLER                       PIC X(01)
                                                   VALUE '.'.
           05 WS-FINAL-MES                 PIC 9(02).
           05 FILLER                       PIC X(01)
                                                   VALUE '.'.
           05 WS-FINAL-DIA                 PIC 9(02).
      *
       77  WS-DATA-INICIAL-F               PIC X(10).
       77  WS-DATA-FINAL-F                 PIC X(10).

       01  WS-DFHCOMMAREA-DATA.
           05 DIA                             PIC 9(02).
           05 MES                             PIC 9(02).
           05 ANO                             PIC 9(04).
           05 MENSAGEM                        PIC X(80).
           05 RESP                            PIC 9(01).
           COPY T08MPED.
           COPY DFHAID.
           COPY DFHBMSCA.
      *
           EXEC SQL
              INCLUDE DCLPROD
           END-EXEC.
           EXEC SQL
              INCLUDE DCLPED
           END-EXEC.
           EXEC SQL
              INCLUDE DCLCAR
           END-EXEC.
      *
           EXEC SQL
              INCLUDE SQLCA
           END-EXEC.
      *----------------------------------------------------------------*
       LINKAGE                             SECTION.
      *----------------------------------------------------------------*
       01  DFHCOMMAREA.
           05 OCCURS 0 TO 24576 TIMES DEPENDING ON EIBCALEN
                                           PIC X(01).
      *----------------------------------------------------------------*
       PROCEDURE                           DIVISION.
      *----------------------------------------------------------------*
           EXEC CICS HANDLE CONDITION
              NOTFND(999-NOTFND)
              MAPFAIL(999-MAPFAIL)
              ERROR(999-ERRO-GENERICO)
           END-EXEC
      ******************************************************************
      *         SELETOR DE FASE - O MENU PRINCIPAL POSSUI 2 FASES
      *         FASE 1 - ENVIA O MAPA PARA O TERMINAL
      *         FASE 2 - TRATA O CAMPO T2COD
      *         FASE 3 - TRATA O CAMPO T2CONF
      ******************************************************************
           MOVE DFHCOMMAREA                TO WS-DFHCOMMAREA
      *
           EVALUATE WS-FASE
              WHEN '1' PERFORM 100-FASE1
              WHEN '2' PERFORM 200-FASE2
      *       WHEN '3' PERFORM 300-FASE3
      *       WHEN OTHER
      *            MOVE +80                TO WS-LENGTH
      *            MOVE 'ERRO NO NUMERO DA FASE'
      *                                    TO MENLOGO
      *
      *            PERFORM 999-ENCERRA-TRANSACAO
           END-EVALUATE
           .
       100-FASE1.
      * LIMPAR AS VARIAVEIS DO MAPA
           MOVE LOW-VALUES                  TO MAPAPEDO
      * POSICINAMENTO LOGICO - DIRETO NO CAMPO DESEJADO
           MOVE -1                          TO PEDPEDL
      * MOVER A MENSAGEM PARA O USUARIO SELECIONAR A OPCAO
           IF ENDFILE-YES
              MOVE 'PRODUTO NAO ENCONTRADO' TO MSGPEDO
           ELSE
              MOVE 'DIGITE O FILTRO DESEJADO!' TO MSGPEDO
           END-IF

           PERFORM 210-ENTER
      *    PERFORM 999-CARREGA-DETALHES
      * MANDAR A TELA PARA O TERMINAL
      *    PERFORM 999-TRATA-FASE2
      * ENCERRA A TRANSACAO AO CHAMAR PROX FASE
      *    PERFORM 999-CHAMA-FASE2
           .
       200-FASE2.
           EXEC CICS HANDLE AID
              ENTER   (210-ENTER)
      *       PF1     (220-PF1)
              PF7     (230-PF7)
              PF8     (230-PF8)
              PF10    (250-PF10)
      *       PF11    (280-PF11)
              PF12    (290-PF12)
              ANYKEY  (240-ANYKEY)
           END-EXEC
      *
           EXEC CICS RECEIVE
                MAP     ('MAPAPED')
                MAPSET  ('T08MPED')
                INTO    (MAPAPEDI)
           END-EXEC
           .
       210-ENTER.
           IF PEDPEDL <= 0
              MOVE SPACES                  TO WS-FILTRO
           END-IF
      *    IF PEDPEDL > 0
      *       MOVE PEDPEDI                      TO WS-PED-AUX
      *       INSPECT WS-PED-AUX
      *               TALLYING WS-INICIO
      *       FOR LEADING SPACES
      *
      *       COMPUTE WS-INICIO = WS-INICIO + 1
      *
      *       INSPECT FUNCTION REVERSE(WS-PED-AUX)
      *             TALLYING WS-FIM
      *       FOR LEADING SPACES
      *
      *       COMPUTE WS-FIM = LENGTH OF WS-PED-AUX - WS-FIM
      *
      *       COMPUTE WS-TAMANHO = WS-FIM - WS-INICIO + 1
      *       MOVE WS-PED-AUX(WS-INICIO:WS-TAMANHO)
      *                                 TO WS-TEXTO-LIMPO
      *       MOVE 'ABC'                 TO WS-FILTRO
      *    END-IF
      *    IF PRLVENL <= 0
      *       MOVE SPACES                      TO WS-FILTRO-V
      *    END-IF
      *    IF PRLVENL > 0
      *       MOVE PRLVENI                      TO WS-VENDA-AUX
      *       INSPECT WS-VENDA-AUX
      *               TALLYING WS-INICIO-V
      *       FOR LEADING SPACES
      *
      *       COMPUTE WS-INICIO-V = WS-INICIO-V + 1
      *
      *       INSPECT FUNCTION REVERSE(WS-VENDA-AUX)
      *             TALLYING WS-FIM-V
      *       FOR LEADING SPACES
      *
      *       COMPUTE WS-FIM-V = LENGTH OF WS-VENDA-AUX - WS-FIM-V
      *
      *       COMPUTE WS-TAMANHO-V = WS-FIM-V - WS-INICIO-V + 1
      *       MOVE WS-VENDA-AUX(WS-INICIO-V:WS-TAMANHO-V)
      *                                 TO WS-TEXTO-LIMPO-V
      *       STRING '%' DELIMITED BY SIZE
      *          WS-TEXTO-LIMPO-V DELIMITED BY SPACES
      *                 '%' DELIMITED BY SIZE
      *                   INTO WS-VENDA-AUX
      *       MOVE WS-VENDA-AUX          TO DCLPROD-VENDIDO-POR-TEXT
      *       COMPUTE WS-TAMANHO-V = WS-TAMANHO-V + 2
      *       MOVE WS-TAMANHO-V          TO DCLPROD-VENDIDO-POR-LEN
      *       MOVE 'ABC'                 TO WS-FILTRO-V
      *    END-IF
      *    IF DIPEDI NOT = SPACES OR DIPEDL NOT = 0 AND
      *       MIPEDI NOT = SPACES OR MIPEDL NOT = 0 AND
      *       AIPEDI NOT = SPACES OR AIPEDL NOT = 0
      *       MOVE DIPEDI                   TO DIA
      *       MOVE MIPEDI                   TO MES
      *       MOVE AIPEDI                   TO ANO
      *       PERFORM 999-CHAMA-VERIDATA
      *       IF RESP = 1
      *          MOVE MENSAGEM              TO MSGPEDO
      *          PERFORM 999-TRATA-FASE2
      *        ELSE
      *           MOVE DIPEDI                   TO WS-INICIAL-DIA
      *           MOVE MIPEDI                   TO WS-INICIAL-MES
      *           MOVE AIPEDI                   TO WS-INICIAL-ANO
      *           MOVE WS-DATA-INICIAL          TO WS-DATA-INICIAL-F
      *        END-IF
      *    ELSE
      *       MOVE '01'                     TO WS-INICIAL-DIA
      *       MOVE '01'                     TO WS-INICIAL-MES
      *       MOVE '1901'                   TO WS-INICIAL-ANO
      *       MOVE WS-DATA-INICIAL          TO WS-DATA-INICIAL-F
      *    END-IF
      *    IF DFPEDI NOT = SPACES OR DFPEDL NOT = 0 AND
      *       MFPEDI NOT = SPACES OR MFPEDL NOT = 0 AND
      *       AFPEDI NOT = SPACES OR AFPEDL NOT = 0
      *       MOVE DFPEDI                   TO DIA
      *       MOVE MFPEDI                   TO MES
      *       MOVE AFPEDI                   TO ANO
      *       PERFORM 999-CHAMA-VERIDATA
      *       IF RESP = 1
      *          MOVE MENSAGEM              TO MSGPEDO
      *          PERFORM 999-TRATA-FASE2
      *        ELSE
      *           MOVE DFPEDI                   TO WS-FINAL-DIA
      *           MOVE MFPEDI                   TO WS-FINAL-MES
      *           MOVE AFPEDI                   TO WS-FINAL-ANO
      *           MOVE WS-DATA-FINAL            TO WS-DATA-FINAL-F
      *        END-IF
      *    ELSE
      *       MOVE '31'                     TO WS-INICIAL-DIA
      *       MOVE '12'                     TO WS-INICIAL-MES
      *       MOVE '2099'                   TO WS-INICIAL-ANO
      *       MOVE WS-DATA-FINAL            TO WS-DATA-FINAL-F
      *    END-IF
      *
      *    MOVE WS-INICIAL-ANO              TO DCLPED...
      *    MOVE WS-INICIAL-MES              TO DCLPED...
      *    MOVE WS-INICIAL-DIA              TO DCLPED...
      *
      *    MOVE WS-FINAL-ANO                TO DCLPED...
      *    MOVE WS-FINAL-MES                TO DCLPED...
      *    MOVE WS-FINAL-DIA                TO DCLPED...
      *
      *    IF VTPEDL NOT EQUAL 0
      *       EXEC CICS BIF DEEDIT FIELD(VTPEDI) END-EXEC
      *    END-IF
      *    IF PRLVALTL NOT EQUAL 0
      *       EXEC CICS BIF DEEDIT FIELD(PRLVALTI) END-EXEC
      *    END-IF
      *    IF VTPEDI NOT = SPACES
      *       IF VTPEDL = 0
      *          MOVE 00000,00                    TO VTPEDI
      *          MOVE 0                           TO WS-VALOR
      *       ELSE
      *          MOVE VTPEDI                     TO WS-VALOR
      *       END-IF
      *    ELSE
      *       MOVE 99999999                       TO WS-VALOR
      *    END-IF
           EXEC SQL
              DECLARE CURPED CURSOR FOR
                  SELECT
                     P.ID_PEDIDO,
                     PR.NOME_PRODUTO,
                     P.DATA_PEDIDO,
                     C.VALOR_UNITARIO
                  FROM
                     PEDIDOS AS P
                  INNER JOIN
                     CARRINHO AS C ON P.ID_PEDIDO = C.ID_PEDIDO
                  INNER JOIN
                     PRODUTOS AS PR ON C.ID_PRODUTO = PR.ID_PRODUTO
                  WHERE
      *                (PR.NOME_PRODUTO LIKE :WS-TEXTO-LIMPO OR
      *                :WS-FILTRO = :WS-ALL-SPACES) AND
                       (P.ID_PEDIDO = :WS-TEXTO-LIMPO OR
                       :WS-FILTRO = :WS-ALL-SPACES) AND
                       (C.VALOR_UNITARIO < :WS-VALOR)
      *                (P.DATA_PEDIDO BETWEEN :WS-DATA-INICIAL-F AND
      *                :WS-DATA-FINAL-F)
                  ORDER BY P.ID_PEDIDO
           END-EXEC
           EXEC SQL
                OPEN CURPED
           END-EXEC
           IF SQLCODE NOT EQUAL 0
              MOVE "ERRO AO ABRIR  CURSOR" TO WS-MSG-ERRO
              PERFORM 999-ENCERRA-TRANSACAO
           END-IF
           EXEC CICS DELETEQ TS
              QUEUE(WS-QUEUE-NAME)
              RESP(WS-RESP)
           END-EXEC

           MOVE ZERO                       TO WS-ITEM
           SET ENDFILE-NO TO TRUE
           PERFORM 999-CARREGA-TS UNTIL ENDFILE-YES

           EXEC SQL
               CLOSE CURPED
           END-EXEC
           IF SQLCODE NOT EQUAL 0
              MOVE "ERRO AO FECHAR CURSOR" TO WS-MSG-ERRO
              PERFORM 999-ENCERRA-TRANSACAO
           END-IF
           IF WS-ITEM < 1
              PERFORM 100-FASE1
           END-IF

           MOVE 1                          TO WS-PEDPAG

           DIVIDE WS-ITEM BY 10 GIVING WS-PEDPAGD REMAINDER WS-RESTO

           IF WS-RESTO > 0
              ADD 1 TO WS-PEDPAGD
           END-IF

           PERFORM 999-CARREGA-DETALHES
           PERFORM 999-TRATA-FASE2
           .
      *220-PF1.
      *    MOVE '1'                        TO WS-FASE
      *    PERFORM 999-VALIDA-POSICAO
      *    MOVE LD-CODPROD                 TO WS-IDPROD-COMMAREA
      *    MOVE 'P'                        TO WS-IDPROD-COMMAREA
      *
      *    EXEC CICS XTCL
      *        PROGRAM('T08PPRD')
      *        COMMAREA(WS-DFHCOMMAREA)
      *        LENGTH(LENGTH OF WS-DFHCOMMAREA)
      *    END-EXEC
      *
      *    .
       250-PF10.
           MOVE '1'                        TO WS-FASE
      *
           EXEC CICS XCTL
               PROGRAM('T08PLOG')
               COMMAREA(WS-DFHCOMMAREA)
               LENGTH(LENGTH OF WS-DFHCOMMAREA)
           END-EXEC
      *
           .
      *280-PF11.
      *    MOVE '1'                        TO WS-FASE
      *
      *    EXEC CICS XCTL
      *        PROGRAM('T08PLOG')
      *        COMMAREA(WS-DFHCOMMAREA)
      *        LENGTH(LENGTH OF WS-DFHCOMMAREA)
      *    END-EXEC
      *
      *    .
       290-PF12.
           MOVE '1'                        TO WS-FASE
      *
           EXEC CICS XCTL
               PROGRAM('T08PLOG')
               COMMAREA(WS-DFHCOMMAREA)
               LENGTH(LENGTH OF WS-DFHCOMMAREA)
           END-EXEC
      *
           .
       230-PF7.
      *
           IF WS-PEDPAG = 1
              MOVE 'VOCE JA ESTA NA PRIMEIRA PAGINA'
                                          TO PRLMSGO
              PERFORM 999-CARREGA-DETALHES
           ELSE
              SUBTRACT 1 FROM WS-PEDPAG
              PERFORM 999-CARREGA-DETALHES
           END-IF

           PERFORM 999-TRATA-FASE2
           .
      *
       230-PF8.
           MOVE '1'                        TO WS-FASE
      *
           IF WS-PEDPAG = WS-PEDPAGD
              MOVE 'VOCE JA ESTA NA ULTIMA PAGINA'
                                          TO PRLMSGO
              PERFORM 999-CARREGA-DETALHES
           ELSE
              ADD 1 TO WS-PEDPAG
              PERFORM 999-CARREGA-DETALHES
           END-IF

           PERFORM 999-TRATA-FASE2
           .
      *

      *230-PF3.
      *    MOVE 'TERMINO NORMAL DA TRANSCAO' TO WS-MSG-ERRO
      *    PERFORM 999-ENCERRA-TRANSACAO
      *    .
       240-ANYKEY.
           MOVE 'TECLA PRESSIONADA INVALIDA'
                                           TO PRLMSGO
           PERFORM 999-TRATA-FASE2
           .
       999-ENCERRA-TRANSACAO.
           MOVE +80                TO WS-LENGTH
           EXEC CICS SEND TEXT
               FROM (WS-MSG-ERRO)
               LENGTH(WS-LENGTH)
               ERASE FREEKB ALARM
           END-EXEC
      *
           EXEC CICS RETURN
           END-EXEC
           .
       999-MANDA-TELA.
           MOVE EIBTRMID                    TO PRLTERO
           MOVE EIBTRNID                    TO PRLTRAO
           MOVE EIBTASKN                    TO PRLTASO
           MOVE WS-FASE                     TO PRLFASO
      *
      *
           EXEC CICS LINK
              PROGRAM('AUXCICS1')
              COMMAREA(WS-VAR-TEMPO)
              LENGTH(+15)
           END-EXEC
           MOVE WS-DATA                    TO PRLDATO
           MOVE WS-HORARIO                 TO PRLHORO
      *
           EXEC CICS SEND
              MAP      ('MAPAPRL')
              MAPSET   ('T08MPRL')
              FROM     (MAPAPRLO)
              ERASE  FREEKB ALARM CURSOR
           END-EXEC
           .
       999-CHAMA-FASE1.
           MOVE '1'                        TO WS-FASE
      *
           EXEC CICS XCTL
               PROGRAM('T08PPED')
               COMMAREA(WS-DFHCOMMAREA)
               LENGTH(LENGTH OF WS-DFHCOMMAREA)
           END-EXEC
      *
           .
       999-CHAMA-FASE2.
           MOVE '2'                        TO WS-FASE
      *
           EXEC CICS RETURN
               TRANSID('FT8N')
               COMMAREA(WS-DFHCOMMAREA)
               LENGTH (LENGTH OF WS-DFHCOMMAREA)
           END-EXEC
           .
       999-TRATA-FASE2.
           PERFORM 999-PROTECAO-FASE2
           MOVE WS-PEDPAG                  TO PRLPAGO
           MOVE WS-PEDPAGD                 TO PRLPAGDO
           PERFORM 999-MANDA-TELA
           PERFORM 999-CHAMA-FASE2
           .
       999-MAPFAIL.
           MOVE 'ERRO MAPA T08PPED'       TO WS-MSG-ERRO
           PERFORM 999-ENCERRA-TRANSACAO
           .
       999-ERRO-GENERICO.
           MOVE WS-FILTRO               TO WS-MSG-ERRO
           PERFORM 999-ENCERRA-TRANSACAO
           .
       999-NOTFND.
           MOVE 'NAO EXISTEM PRODUTOS COM CODIGO MAIOR OU IGUAL AO INFOR
      -         'MADO'                     TO PRLMSGO
           PERFORM 999-TRATA-FASE2
           .
       999-CARREGA-TS.
           EXEC SQL
               FETCH CURPED
               INTO  :DCLPROD-ID-PRODUTO
                    ,:DCLPROD-NOME-PRODUTO
                    ,:DCLPED-DATA-PEDIDO
                    ,:DCLPROD-VALOR-UNITARIO
           END-EXEC

           EVALUATE SQLCODE
              WHEN 0
                 ADD 1 TO WS-ITEM
                 MOVE DCLPROD-ID-PRODUTO         TO LD-ID-PED
                 MOVE DCLPROD-NOME-PRODUTO       TO LD-ITEM
                 MOVE DCLPED-DATA-PEDIDO         TO LD-DATA
                 MOVE DCLPROD-VALOR-UNITARIO     TO LD-VALORPROD

                 EXEC CICS WRITEQ TS
                    QUEUE(WS-QUEUE-NAME)
                    FROM(LD-LINDET)
                    ITEM(WS-ITEM)
                    RESP(WS-RESP)
                 END-EXEC

                 IF WS-RESP NOT = DFHRESP(NORMAL)
                    PERFORM 999-ERRO-GENERICO
                 END-IF
              WHEN 100
      *          IF WS-ITEM < 1
      *             MOVE 'PRODUTO NAO ENCONTRADO' TO PRLMSGO
      *             PERFORM 999-TRATA-FASE2
      *          END-IF
                 SET ENDFILE-YES TO TRUE
              WHEN OTHER
                 PERFORM 999-ERRO-GENERICO
           END-EVALUATE
           .
       999-CARREGA-DETALHES.
           COMPUTE WS-ITEM = (WS-PEDPAG - 1) * 10 + 1
           MOVE 0                          TO WS-INDEX

           PERFORM WITH TEST AFTER UNTIL WS-INDEX = 10
              EXEC CICS READQ TS
                 QUEUE (WS-QUEUE-NAME)
                 INTO  (LD-LINDET)
                 ITEM  (WS-ITEM)
                 RESP  (WS-RESP)
              END-EXEC

              IF WS-RESP = DFHRESP(NORMAL)
                 ADD 1 TO WS-INDEX
                 MOVE LD-LINDET            TO PRLLINDO(WS-INDEX)
              ELSE
                 IF WS-RESP = DFHRESP(ITEMERR)
                    PERFORM WITH TEST AFTER UNTIL WS-INDEX = 10
                       ADD 1 TO WS-INDEX
                       MOVE SPACES         TO PRLLINDO(WS-INDEX)
                    END-PERFORM
                 ELSE
                    PERFORM 999-ERRO-GENERICO
                 END-IF
              END-IF
              ADD 1 TO WS-ITEM
           END-PERFORM
           .
       999-VALIDA-POSICAO.
           IF EIBCPOSN <= 640 OR EIBCPOSN >= 1439
              MOVE 'POSICAO INVALIDA DO CURSOR'
                                          TO PRLMSGO
              PERFORM 999-TRATA-FASE2
           END-IF
           COMPUTE WS-INDEX = (EIBCPOSN / 80 ) - 7
           MOVE PRLLINDI(WS-INDEX)       TO LD-LINDET
           IF LD-DESCPROD EQUAL SPACES
              MOVE 'POSICAO NAO CONTEM PRODUTO'
                                         TO PRLMSGO
              PERFORM 999-TRATA-FASE2
           END-IF
      *    STRING 'PRODUTO '               DELIMITED BY SIZE
      *             LD-DESCPROD            DELIMITED BY SIZE
      *           'SELECIONADO PARA CONSULTA' DELIMITED BY SIZE
      *                                    INTO PRLMSGO
           .
       999-PROTECAO-FASE2.
           MOVE DFHUNDLN                   TO PRLPRODH
           MOVE DFHUNDLN                   TO PRLVALH
           MOVE DFHUNDLN                   TO PRLVALTH
           MOVE DFHUNDLN                   TO PRLVENH
      *
           MOVE DFHUNIMD                   TO PRLPRODA
           MOVE DFHUNIMD                   TO PRLVALA
           MOVE DFHUNIMD                   TO PRLVALTA
           MOVE DFHUNIMD                   TO PRLVENA
           MOVE -1                         TO PRLPRODL
           .
       999-CHAMA-VERIDATA.
           EXEC CICS LINK
               PROGRAM('VERIDATA')
               COMMAREA(WS-DFHCOMMAREA-DATA)
               LENGTH(+91)
           END-EXEC
           .
